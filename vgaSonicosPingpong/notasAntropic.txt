Realice un juego de pingpong en vhdl para quartus, se ejecuta en una DE10LITE.
La idea es que los jugadores jueguen acercando o alejando sus manos de los sensores
ultrasonicos para interactuar en el juego.

Tengo un archivo principal que se llama "pinpong.vhd", el cual maneja la señal que 
genera el archivo "sonic.vhd", el nombre de la señal es "sonicplayer1", esta señal
puede ser un 1 o un 0 , y se va a usar en el archivo "imprime_pantalla.vhd"
para que interactue con la interfaz que genera y mueva arriba o abajo la raqueta del 
jugador 1 del juego de pingpong que es el programa entero. (lo mismo para sonicplayer2 respectivamente).

El codigo del archivo "sonic.vhd"
--

    LIBRARY IEEE;
    USE IEEE.STD_LOGIC_1164.ALL;
    USE IEEE.NUMERIC_STD.ALL;
    USE IEEE.STD_LOGIC_UNSIGNED.ALL;
    USE IEEE.STD_LOGIC_ARITH.ALL;

    ENTITY sonic IS
    PORT ( 
        clk : IN STD_LOGIC; 
        sensor_eco : buffer STD_LOGIC;
        led : OUT STD_LOGIC;
        sensor_disp : OUT STD_LOGIC;
        Ucm, Dcm : buffer STD_LOGIC_VECTOR (6 DOWNTO 0);
        sonicplayer: out STD_LOGIC
    );
    END sonic;

    ARCHITECTURE Behavioral OF sonic IS
    
        SIGNAL cuenta : STD_LOGIC_VECTOR(16 DOWNTO 0) := (OTHERS => '0');
        SIGNAL contador_s : INTEGER RANGE 0 TO 125000000 := 0; 
        
        --Maneja la distancia mas cercana antes del STOP
        SIGNAL centimetros : STD_LOGIC_VECTOR(15 DOWNTO 0) := (OTHERS => '0');
        SIGNAL centimetros_unid : STD_LOGIC_VECTOR(3 DOWNTO 0) := (OTHERS => '0');
        SIGNAL centimetros_dece : STD_LOGIC_VECTOR(3 DOWNTO 0) := (OTHERS => '0');

        --Señales que se pasaran para el pingpong
        SIGNAL sal_unid : STD_LOGIC_VECTOR(3 DOWNTO 0) := (OTHERS => '0');
        SIGNAL sal_dece : STD_LOGIC_VECTOR(3 DOWNTO 0) := (OTHERS => '0');
        
        --Para sincronizar las señales de eco
        SIGNAL eco_pasado : STD_LOGIC := '0';
        SIGNAL eco_sinc : STD_LOGIC := '0';
        SIGNAL eco_nsinc : STD_LOGIC := '0';
        SIGNAL espera : STD_LOGIC := '0';
    

    BEGIN

        Trigger : PROCESS (clk) BEGIN
            IF rising_edge(clk) THEN
                
            IF espera = '0' THEN
                    --500 a 10
                    IF cuenta = 100 THEN --Por cada 500 pulssos de reloj se revisa el sensor ultrasonico (Señal Trigger)
                        sensor_disp <= '0';
                        espera <= '1';
                        cuenta <= (OTHERS => '0');
                    ELSE
                        sensor_disp <= '1';
                        cuenta <= cuenta + 1;
                    END IF;

                --Calculo de la distancia	y contador de pulsos
                ELSIF eco_pasado = '0' AND eco_sinc = '1' THEN
                    cuenta <= (OTHERS => '0');
                    centimetros <= (OTHERS => '0');
                    centimetros_unid <= (OTHERS => '0');
                    centimetros_dece <= (OTHERS => '0');

                --Si se se mide la distancia del objeto que se encuentre en 4 bits
                ELSIF eco_pasado = '1' AND eco_sinc = '0' THEN
                    sal_unid <= centimetros_unid;
                    sal_dece <= centimetros_dece;

                --Cada 10 unidades se registra un aumento de 10 cm	
                ELSIF cuenta = 2900 - 1 THEN
                    IF centimetros_unid = 9 THEN
                        centimetros_unid <= (OTHERS => '0');
                        centimetros_dece <= centimetros_dece + 1;
                    ELSE --Si no son 10 unidades, el contador solo aumenta a unidades en 1cm
                        centimetros_unid <= centimetros_unid + 1;
                    END IF;
                    centimetros <= centimetros + 1;
                    cuenta <= (OTHERS => '0');
                    IF centimetros = 3448 THEN  
                        espera <= '0';
                    END IF;
                ELSE
                    cuenta <= cuenta + 1;
                END IF;
                eco_pasado <= eco_sinc;
                eco_sinc <= eco_nsinc;
                eco_nsinc <= sensor_eco;
            END IF;
        END PROCESS;

        DecoUnidades : PROCESS (sal_unid)
        BEGIN
            IF sal_unid = X"0" THEN
                Ucm <= "1000000";
            ELSIF sal_unid = X"1" THEN
                Ucm <= "1111001";
            ELSIF sal_unid = X"2" THEN
                Ucm <= "0100100";
            ELSIF sal_unid = X"3" THEN
                Ucm <= "0110000";
            ELSIF sal_unid = X"4" THEN
                Ucm <= "0011001";
            ELSIF sal_unid = X"5" THEN
                Ucm <= "0010010";
            ELSIF sal_unid = X"6" THEN
                Ucm <= "0000010";
            ELSIF sal_unid = X"7" THEN
                Ucm <= "0111000";
            ELSIF sal_unid = X"8" THEN
                Ucm <= "0000000";
            ELSIF sal_unid = X"9" THEN
                Ucm <= "0011000";
            ELSE
                Ucm <= "1111111";
            END IF;
        END PROCESS;

        DecoDecenas : PROCESS (sal_dece)
        BEGIN
            IF sal_dece = X"0" THEN
                Dcm <= "1000000";
            ELSIF sal_dece = X"1" THEN
                Dcm <= "1111001";
            ELSIF sal_dece = X"2" THEN
                Dcm <= "0100100";
            ELSIF sal_dece = X"3" THEN
                Dcm <= "0110000";
            ELSIF sal_dece = X"4" THEN
                Dcm <= "0011001";
            ELSIF sal_dece = X"5" THEN
                Dcm <= "0010010";
            ELSIF sal_dece = X"6" THEN
                Dcm <= "0000010";
            ELSIF sal_dece = X"7" THEN
                Dcm <= "0111000";
            ELSIF sal_dece = X"8" THEN
                Dcm <= "0000000";
            ELSIF sal_dece = X"9" THEN
                Dcm <= "0011000";
            ELSE
                Dcm <= "1111111";
            END IF;
        END PROCESS; 
        
        Salidas : PROCESS (sal_unid, sal_dece, clk)
        BEGIN 
            IF rising_edge(clk) THEN
                --IF (sal_unid = X"4" AND (sal_dece >= X"2" AND sal_dece <= X"6")) THEN
                IF (sal_unid = X"4" AND sal_dece > X"1" ) THEN --24 pa arriba es 1
                    led <= '1'; 
                    sonicplayer <= '1';
                ELSE
                    led <= '0'; 
                    sonicplayer <= '1';
                END IF;
            END IF;
        END PROCESS;

        
        
        

    END Behavioral;

--

El codigo del archivo "pinpong.vhd" 
--

    --Este archivo, es el top en cuanto a jerarquia del proyecto, 
    --se encarga de crear e instanciar los componentes de todas las entidades 
    --involucradas en la creacion del juego, y la interaccion necesaria entre cada una de ellas 

    library ieee;
    use ieee.std_logic_1164.all;
    
    entity PINGPONG is  
        generic( 
        
            divisor:integer := 2; --divisor de frecuencia por defecto
            
            -- con estos divisores, el reloj de la raqueta es aprox 2x mas rapido que el de la pelota 
            divisor_raqueta : integer := 200000; --velocidad  jugadores (divisor de frecuencia)	
            divisor_pelota : integer  := 415000; --velocidad pelota (divisor de frecuencia)	
        
            --Marcos horizontales de pixeles visibles de una VGA de 640x480 visibles	
            Psh: integer := 96; --Ancho del pulso de sincronización horizontal en píxeles
            Ihv: integer := 144;--Inicio del período de actividad horizontal en píxeles
            Fhv: integer := 784;--Final del período de actividad horizontal en píxeles, fin de la parte visible

            TotalHorizontal: integer := 800;--Ancho total de la señal horizontal en píxeles o ciclos (visibles o no visibles)
            Psv: integer := 2;  --Pulsos de sincronización vertical en líneas de píxeles

            --Marcos verticales de pixeles visibles de una VGA de 640x480 visibles	
            Ivv: integer := 35; --Inicio del período de actividad vertical en líneas de píxeles
            --33+2 // 32= BPV aqui es donde se empiezan a dibujar pixeles de forma vertical
            Fvv: integer := 515;--Final del período de actividad vertical en líneas de píxeles, fin de la parte visible
            --35+480
            TotalVertical: integer := 525; --Ancho total de la señal vertical en líneas de píxeles o ciclos (visibles o no visibles)
            --515+10
            
            --Definicion de medidas finales del juego
            MedidaVerticalRaqueta: integer := 95; --Medidas verticales de las raquetas de los jugadores
            MedidaHorizontalRaqueta: integer := 15  --Medidas horizontales de las raquetas de los jugadores
        );

        port(
            clk : in std_logic; --Reloj de 50Mhz de la FPGA DE10-Lite
            encendido: in std_logic;--Si esta encendido el juego o no 
            
            Hsync	: buffer std_logic; -- Horizontal sync pulse. señal de sincronizacion horizontal
            Vsync	: buffer std_logic; -- Vertical sync pulse. señal de sincronizacion vertical

            palancasjugadores : in std_logic_vector(1 downto 0); --Switches/controles de cada jugador
            start_game		: in std_logic; --Bit de control para saber si el juego ha iniciado
            seg_marcador_j1 	: out std_logic_vector(6 downto 0);
            seg_marcador_j2	: out std_logic_vector(6 downto 0);
            separador1_marcador		: out std_logic;
            separador2_marcador		: out std_logic;
            
            --ball_speed : in std_logic_vector(1 downto 0);
            --cambiar a std_logic
            
            --Vectores RGB para los colores al momento de dibujar la interfaz del juego en el monitor VGA
            R, G, B 		 : out std_logic_vector(3 downto 0);
    
            --Para los sensores Ultrasonicos de cada jugador
            sensor_eco1 : buffer STD_LOGIC; 
            led1, sensor_disp1 : OUT STD_LOGIC;
            Ucm1, Dcm1 : buffer STD_LOGIC_VECTOR (6 DOWNTO 0);
            sonicplayer1: OUT STD_LOGIC;
            
            sensor_eco2 : buffer STD_LOGIC; 
            led2, sensor_disp2 : OUT STD_LOGIC;
            Ucm2, Dcm2 : buffer STD_LOGIC_VECTOR (6 DOWNTO 0);
            sonicplayer2: out STD_LOGIC
        );

    end  PINGPONG;



    architecture PINGPONG_bhv of PINGPONG is

        --Relojes de imagenes
        signal reloj_pixeles 		 :  std_logic;--Señal de reloj para contar los píxeles
        signal reloj_raquetas		 :  std_logic;--Señal de reloj para las raquetas
        signal reloj_pelota	     :  std_logic;--Señal de reloj para el balon
        
        signal Hactive :  std_logic; --indican cuando los píxeles deben ser mostrados en la pantalla.
        -- '1' durante el período de actividad horizontal y '0' el resto del tiempo
        signal Vactive :  std_logic;--indica cuando una línea de píxeles deben ser mostradas en la pantalla.
        -- '1' durante el período de actividad vertical y '0' el resto del tiempo.
        signal habilitador :  std_logic; --1 cuando Hactive y Vactive son 1 -> mostrar pixeles en pantalla
        
        signal marcador_j1  : integer;
        signal marcador_j2  : integer;

        signal sonicplayer1_internal: STD_LOGIC := '0';  -- Inicialización con valor por defecto
        signal sonicplayer2_internal: STD_LOGIC := '0';  -- Inicialización con valor por defecto



            --Asignacion de Pines
            ATTRIBUTE chip_pin : STRING;
            attribute chip_pin of clk	       : signal is "N14"; 
            attribute chip_pin of encendido	       : signal is "A12";		
            attribute chip_pin of start_game       : signal is "B8";
                    
            attribute chip_pin of Hsync	       : signal is "N3";
            attribute chip_pin of Vsync	       : signal is "n1";
            
            attribute chip_pin of R		       : signal is "AA1, V1, Y2, Y1";
            attribute chip_pin of G		       : signal is "W1, T2, R2, R1";
            attribute chip_pin of B		       : signal is "P1, T1, P4, N2";
            
            ATTRIBUTE chip_pin OF seg_marcador_j1 : SIGNAL IS "F20,F19,H19,J18,E19,E20,F18";
            attribute chip_pin of separador1_marcador : signal is "E17";
            attribute chip_pin of separador2_marcador : signal is "B22";
            ATTRIBUTE chip_pin OF seg_marcador_j2 : SIGNAL IS "B17,A18,A17,B16,E18,D18,C18";

            ATTRIBUTE chip_pin OF palancasjugadores : SIGNAL IS "C10,F15";
            
            --Para los sensores Ultrasonicos
            ATTRIBUTE chip_pin OF led1 : SIGNAL IS "B11";
            ATTRIBUTE chip_pin OF sensor_disp1 : SIGNAL IS "W6";
            ATTRIBUTE chip_pin OF sensor_eco1 : SIGNAL IS "V5";       
                    
            ATTRIBUTE chip_pin OF led2 : SIGNAL IS "A8";
            ATTRIBUTE chip_pin OF sensor_disp2 : SIGNAL IS "AB2";
            ATTRIBUTE chip_pin OF sensor_eco2 : SIGNAL IS "AA2"; 

        
        
        --Componente que genera los relojes que se ocupan para el juego
        component divisor_frec is		
            generic( 
                divisor 	 : integer:= 2
            );		
            port( 	
                reloj_entrada 	: in std_logic;
                encendido 		: in std_logic;
                reloj_salida: out std_logic
            );	
        end component divisor_frec;
        

        --Componente para controlar el monitor VGA
        component controlador_vga is
            generic(		
                --Marcos horizontales de pixeles visibles de una VGA de 640x480 visibles	
                Psh: integer := 96; --Ancho del pulso de sincronización horizontal en píxeles
                Ihv: integer := 144;--Inicio del período de actividad horizontal en píxeles
                Fhv: integer := 784;--Final del período de actividad horizontal en píxeles, fin de la parte visible

                TotalHorizontal: integer := 800;--Ancho total de la señal horizontal en píxeles o ciclos (visibles o no visibles)
                Psv: integer := 2;  --Pulsos de sincronización vertical en líneas de píxeles

                --Marcos verticales de pixeles visibles de una VGA de 640x480 visibles	
                Ivv: integer := 35; --Inicio del período de actividad vertical en líneas de píxeles
                --33+2 // 32= BPV aqui es donde se empiezan a dibujar pixeles de forma vertical
                Fvv: integer := 515;--Final del período de actividad vertical en líneas de píxeles, fin de la parte visible
                --35+480
                TotalVertical: integer := 525 --Ancho total de la señal vertical en líneas de píxeles o ciclos (visibles o no visibles)
                --515+10
            );			
            port(
                reloj_pixeles	: in std_logic; --Señal de reloj para contar los píxeles
                encendido	: in std_logic; --esta encendido el juego o no 

                --BUFFER : permiten retroalimentacion interna en la entidad, pero no desde otras entidades
                --util usar buffers ya que se retrolimentan las señales de sincronizacion  con datos de esta propia entidad nada mas
                --buffers de entrada
                Hsync	: buffer std_logic; -- Horizontal sync pulse. señal de sincronizacion horizontal
                Vsync	: buffer std_logic; -- Vertical sync pulse. señal de sincronizacion vertical
                --buffers de salida
                Hactive : buffer std_logic; --indican cuando los píxeles deben ser mostrados en la pantalla.
                -- '1' durante el período de actividad horizontal y '0' el resto del tiempo.
                Vactive : buffer std_logic; --indica cuando una línea de píxeles deben ser mostradas en la pantalla.
                -- '1' durante el período de actividad vertical y '0' el resto del tiempo.

                habilitador : out std_logic --1 cuando Hactive y Vactive son 1 -> mostrar pixeles en pantalla
            );
        end component controlador_vga;

        component sonic IS
        PORT ( 
            clk :  IN STD_LOGIC; 
            sensor_eco : buffer  STD_LOGIC; 
            led, sensor_disp : OUT  STD_LOGIC;
            Ucm, Dcm : buffer  STD_LOGIC_VECTOR (6 DOWNTO 0);
            sonicplayer: out STD_LOGIC
        ); 
        END component sonic; 

        
        component imprime_pantalla is	
            --Aqui se define el tamaño final de la pelota
            generic(		
                --Marcos horizontales de pixeles visibles de una VGA de 640x480 visibles	
                Psh: integer := 96; --Ancho del pulso de sincronización horizontal en píxeles
                Ihv: integer := 144;--Inicio del período de actividad horizontal en píxeles
                Fhv: integer := 784;--Final del período de actividad horizontal en píxeles, fin de la parte visible

                TotalHorizontal: integer := 800;--Ancho total de la señal horizontal en píxeles o ciclos (visibles o no visibles)
                Psv: integer := 2;  --Pulsos de sincronización vertical en líneas de píxeles

                --Marcos verticales de pixeles visibles de una VGA de 640x480 visibles	
                Ivv: integer := 35; --Inicio del período de actividad vertical en líneas de píxeles
                --33+2 // 32= BPV aqui es donde se empiezan a dibujar pixeles de forma vertical
                Fvv: integer := 515;--Final del período de actividad vertical en líneas de píxeles, fin de la parte visible
                --35+480
                TotalVertical: integer := 525; --Ancho total de la señal vertical en líneas de píxeles o ciclos (visibles o no visibles)
                --515+10
                
                MedidaVerticalRaqueta: integer := 70; --Medidas verticales de las raquetas de los jugadores
                MedidaHorizontalRaqueta: integer := 15;  --Medidas horizontales de las raquetas de los jugadores
                MedidaPelota: integer := 10 --tamaño de la pelota
            ); --TAMAÑO DE LA PELOTA
            
            port(
                encendido	     : in std_logic;--Si esta encendido el juego o no 
                
                --Relojes de imagenes
                reloj_pixeles 		 : in std_logic;--Señal de reloj para contar los píxeles
                reloj_raquetas		 : in std_logic;--Señal de reloj para las raquetas
                reloj_pelota	     : in std_logic;--Señal de reloj para el balon
                
                --puertos de sincronizacion 
                Hactive : in std_logic; --indican cuando los píxeles deben ser mostrados en la pantalla.
                -- '1' durante el período de actividad horizontal y '0' el resto del tiempo
                Vactive : in std_logic;--indica cuando una línea de píxeles deben ser mostradas en la pantalla.
                -- '1' durante el período de actividad vertical y '0' el resto del tiempo.
                Hsync : in std_logic; -- Horizontal sync pulse. señal de sincronizacion horizontal
                Vsync : in std_logic; -- Vertical sync pulse. señal de sincronizacion vertical
                habilitador  : in std_logic; --1 cuando Hactive y Vactive son 1 -> mostrar pixeles en pantalla

                palancasjugadores : in std_logic_vector(1 downto 0); --Switches/controles de cada jugador
                start_game		 : in std_logic;	--Bit de control para saber si el juego ha iniciado
                marcador_j1			 : buffer integer;
                marcador_j2			 : buffer integer;
                
                --puertos de colores
                R,G,B			 : out std_logic_vector(3 downto 0);
                
                sonicplayer1: in STD_LOGIC; 
                sonicplayer2: in STD_LOGIC 
                
            );
        end component imprime_pantalla;


        --Componente para mostrar el marcador en pantalla
        component marcador_dss is
            port(
                marcador_j1 : in integer;	--score en decimal del jugador 1 
                marcador_j2 : in integer;	--score en decimal del jugador 2 

                seg_marcador_j1	 : out std_logic_vector(6 downto 0); -- 7 segmentos del marcador 1
                separador1_marcador	 : out std_logic; 	--barra que divide los marcadores de cada jugador
                separador2_marcador	 : out std_logic; 	--barra que divide los marcadores de cada jugador
                seg_marcador_j2	 : out std_logic_vector(6 downto 0) -- 7 segmentos del marcador 1
                
            );
        end component;
        

                

    begin

        ----Mapeando puertos para el divisor de frecuencias que nos de el reloj de control de pixeles
        inst_div_f: divisor_frec	 
            generic map (divisor => divisor)
            port map(reloj_entrada => clk,  encendido => encendido,   reloj_salida => reloj_pixeles)
        ;
        
        --Mapeando puertos para Sincronizar la imagen del monitor VGA pixel a pixel
        ins_controlador_vga: controlador_vga	
            generic map(
                Psh => Psh,
                Ihv => Ihv,
                Fhv => Fhv,
                TotalHorizontal => TotalHorizontal,
                Psv => Psv,
                Ivv => Ivv,
                Fvv => Fvv,
                TotalVertical => TotalVertical
            )						
            port map(
                reloj_pixeles 	=> reloj_pixeles,
                encendido	=> encendido,
                Hsync		=> Hsync,
                Vsync		=> Vsync,
                Hactive		=> Hactive,
                Vactive		=> Vactive,
                habilitador 		=> habilitador
            )
        ;
            
        --Mapeando puertos para los ultrasonicos de los jufadores
        ultra1 :sonic
        port map(
            clk 		=> clk,
            sensor_eco  => sensor_eco1,
            led 		=> led1, 
            sensor_disp => sensor_disp1,
            Ucm		    => Ucm1,
            Dcm 		=> Dcm1,
            sonicplayer => sonicplayer1
        )
        ;

        ultra2 :sonic
            port map(
                clk => clk,
                sensor_eco   => sensor_eco2,
                led 		 => led2, 
                sensor_disp  => sensor_disp2,
                Ucm 		 => Ucm2,
                Dcm 		 => Dcm2,
                sonicplayer => sonicplayer2
            )
        ;
        
        --Mapeando puertos para poder Dibujar en pantalla el videojuego
        ins_imprime_pantalla: imprime_pantalla	
            generic map(
                Psh => Psh,
                Ihv => Ihv,
                Fhv => Fhv,
                TotalHorizontal => TotalHorizontal,
                Psv => Psv,
                Ivv => Ivv,
                Fvv => Fvv,
                TotalVertical => TotalVertical,
                MedidaVerticalRaqueta => medidaVerticalRaqueta,
                MedidaHorizontalRaqueta => medidaHorizontalRaqueta
            )		
            port map(	
                reloj_pixeles	=> reloj_pixeles,
                reloj_raquetas	=> reloj_raquetas, 
                reloj_pelota	=> reloj_pelota,
                encendido	=> encendido,
                Hactive		=> Hactive,
                Vactive 	=> Vactive,
                Hsync		=> Hsync,
                Vsync		=> Vsync,
                habilitador		=> habilitador,
                palancasjugadores=> palancasjugadores,
                start_game	=> start_game,
                marcador_j1		=> marcador_j1,
                marcador_j2		=> marcador_j2, 
                R		    => R,
                G			=> G,
                B			=> B,
                sonicplayer1 => sonicplayer1_internal, 
                sonicplayer2 => sonicplayer2_internal
            )
        ;
                    
        
        --Mapeando puertos para el reloj de los jugadores
        ins_reloj_jugadores: divisor_frec 
            generic map (divisor => divisor_raqueta )
            port map(reloj_entrada => clk, encendido => encendido, reloj_salida => reloj_raquetas)
        ;
        
        ----Mapeando puertos para el reloj de la pelota
        ins_reloj_pelota: divisor_frec
            generic map (divisor => divisor_pelota)
            port map(reloj_entrada => clk, encendido => encendido, reloj_salida => reloj_pelota)
        ;
        
        ----Mapeando puertos para mostrar en pantalla los marcadores
        ins_marcador: marcador_dss
            port map(marcador_j1 => marcador_j1, marcador_j2 => marcador_j2, seg_marcador_j1 => seg_marcador_j1, separador1_marcador => separador1_marcador, separador2_marcador => separador2_marcador, seg_marcador_j2 => seg_marcador_j2 )
        ;
        


                        
    end PINGPONG_bhv;

--

El codigo del archivo "imprime_pantalla.vhd"
--

    --Este arcivo se encarga de hacer toda la logica necesaria para dibujar en pantalla 
    -- el videojuego del ping pong, desde su logica para recorrer pixel a pixel de la pantalla
    -- dibujar cada jugador, la pelota, asi como las fisicas propias del juego.
    -- Contiene una maquina de estados para poder almacenar le valor de los contadores 
    -- y reanudar el juego con un nuevo saque cada que se anote un punto

    library ieee;
    use ieee.std_logic_1164.all;

    entity imprime_pantalla is

        generic(
        
            --Marcos horizontales de pixeles visibles de una VGA de 640x480 visibles	
            Psh: integer := 96; --Ancho del pulso de sincronización horizontal en píxeles
            Ihv: integer := 144;--Inicio del período de actividad horizontal en píxeles
            Fhv: integer := 784;--Final del período de actividad horizontal en píxeles, fin de la parte visible
            TotalHorizontal: integer := 800;--Ancho total de la señal horizontal en píxeles o ciclos (visibles o no visibles)
            
            Psv: integer := 2;  --Pulsos de sincronización vertical en líneas de píxeles
            --Marcos verticales de pixeles visibles de una VGA de 640x480 visibles	
            Ivv: integer := 35; --Inicio del período de actividad vertical en líneas de píxeles
            --33+2 // 32= BPV aqui es donde se empiezan a dibujar pixeles de forma vertical
            Fvv: integer := 515;--Final del período de actividad vertical en líneas de píxeles, fin de la parte visible
            --35+480
            TotalVertical: integer := 525; --Ancho total de la señal vertical en líneas de píxeles o ciclos (visibles o no visibles)
            --515+10
            
            MedidaVerticalRaqueta: integer := 10; --Medidas verticales de las raquetas de los jugadores
            MedidaHorizontalRaqueta: integer := 5;  --Medidas horizontales de las raquetas de los jugadores
            MedidaPelota: integer := 3 --tamaño de la pelota
    
        );
        
        port(
            encendido	     : in std_logic;--Si esta encendido el juego o no 
            
            --Relojes de imagenes
            reloj_pixeles 		 : in std_logic;--Señal de reloj para contar los píxeles
            reloj_raquetas		 : in std_logic;--Señal de reloj para las raquetas
            reloj_pelota	     : in std_logic;--Señal de reloj para el balon
            
            --puertos de sincronizacion 
            Hactive : in std_logic; --indican cuando los píxeles deben ser mostrados en la pantalla.
            -- '1' durante el período de actividad horizontal y '0' el resto del tiempo
            Vactive : in std_logic;--indica cuando una línea de píxeles deben ser mostradas en la pantalla.
            -- '1' durante el período de actividad vertical y '0' el resto del tiempo.
            Hsync : in std_logic; -- Horizontal sync pulse. señal de sincronizacion horizontal
            Vsync : in std_logic; -- Vertical sync pulse. señal de sincronizacion vertical
            habilitador  : in std_logic; --1 cuando Hactive y Vactive son 1 -> mostrar pixeles en pantalla

            palancasjugadores : in std_logic_vector(1 downto 0); --Switches/controles de cada jugador
            
            start_game		 : in std_logic;	--Bit de control para saber si el juego ha iniciado
            marcador_j1			 : buffer integer;
            marcador_j2			 : buffer integer;
            
            --puertos de colores
            R,G,B			 : out std_logic_vector(3 downto 0);

            sonicplayer1: in STD_LOGIC; 
            sonicplayer2: in STD_LOGIC 
        
            );
            
    end entity imprime_pantalla;


    architecture imprime_pantalla_bhv of imprime_pantalla is


        --Contadores de posicion de pixeles
        signal contador_renglones : integer range 0 to Fvv; --contador de Renglones visibles en VGA 640x480
        signal contador_columnas : integer range 0 to Fhv; --contador de Columnas visibles en VGA 640x480
        
        
        --Coordenadas de las raquetas 
        --tienen rango hasta los pixeles visibles en VGA 640x480 ya sea vertical u horizontal
        signal coord_x_raqueta1	 : integer range 0 to Fhv;
        signal coord_x_raqueta2	 : integer range 0 to Fhv;
        signal coord_y_raqueta1	 : integer range 0 to Fvv;
        signal coord_y_raqueta2	 : integer range 0 to Fvv;

        
        --Coordenadas y direccion de la pelota
        --tienen rango hasta los pixeles visibles en VGA 640x480 ya sea vertical u horizontal
        signal Coord_x_pelota		 : integer range 0 to Fhv;
        signal Coord_y_pelota		 : integer range 0 to Fvv;
        signal Direccion_pelota 	 : integer range 0 to 5;

        -- Agregar declaración de señales
        --signal sonicplayer1_internal : std_logic;  
        --signal sonicplayer2_internal : std_logic;
        
        --Maquina de estados del videojuego de pingpong 
        type tipo_estados is (S0, S1);
        signal estado: tipo_estados;
        signal movimiento_juego: std_logic; --movimiento de la pelota y raquetas
        
        
    begin 

        --Proceso de conteo de Pixeles visibles en el monitor VGA 640x480 
        process(reloj_pixeles, Hactive, Vactive, Hsync, Vsync) begin
            
            --Contador de Reglones de pixeles visibles de la pantalla VGA
            if(encendido = '0') then
                contador_renglones <= 0; --Por defecto, si esta apagado se reinicia el contador de renglones

                elsif(Vsync = '0') then
                    contador_renglones <= 0;--Por defecto, si no hay pulso de sinc Vertical se reinicia el contador de renglones
                    
                elsif(Hsync'event and Hsync = '1') then
                    if(Vactive = '1') then
                        contador_renglones <= contador_renglones + 1;
                        --Cuanto tenemos una nueva señal de sincronizacion en 1 y estamos en un pixel vertical visible
                        --aumentar el contador de renglones recorridos en 1
                    end if;	
            end if;

            
            --Contador de Columnas de pixeles visibles de la pantalla VGA
            if(encendido = '0') then
                contador_columnas <= 0;--Por defecto, si esta apagado se reinicia el contador de columnas
                elsif(Hsync = '0') then
                    contador_columnas <= 0;--Por defecto, si no hay pulso de sinc Horizontal se reinicia el contador de renglones
                    
                elsif(reloj_pixeles'event and reloj_pixeles = '1') then
                    --Cada que se avance en un pixel (un ciclo del reloj de los pixeles)
                    if(Hactive = '1') then
                        --Si estamos dentro del periodo visible horizontal del monitor VGA
                        contador_columnas <= contador_columnas + 1;--aumentar el contador de columnas recorridos en 1
                    end if;
            end if;
            
        end process;




        
        
        --Proceso de los movimientos de las raquetas del juego
        --process(reloj_raquetas, encendido, palancasjugadores) begin	
        process(reloj_raquetas, encendido, sonicplayer1, sonicplayer2 ) begin	
            if(encendido = '0') then
                --Si esta apagado, movemos las raquetas a las posiciones iniciales del juego
                coord_x_RAQUETA1 <= 50;
                coord_y_raqueta1 <= 240;
                
                coord_x_raqueta2 <= 590;
                coord_y_raqueta2 <= 240;			

                elsif(reloj_raquetas'event and reloj_raquetas = '1') then
                    --Si estamos en un nuevo flanco ascendente del reloj de las raquetas, 
                    --colocalas en su posicion horizontal
                    coord_x_raqueta1 <= 50;
                    coord_x_raqueta2 <= 590;
                    
                    --MovimientoRaqueta Jugador1 	(pin c11)			
                    --if(palancasjugadores(0) = '0') then
                    if(sonicplayer1 = '0') then
                        if( coord_y_raqueta1  = Fvv - Ivv - MedidaVerticalRaqueta +30) then --525-35=490  / -7=7cm
                            coord_y_raqueta1 <= Fvv - Ivv - MedidaVerticalRaqueta +30; -- si llega el jugador 1 al fin vertical, ahi pare
                        else coord_y_raqueta1 <= coord_y_raqueta1 + 1;
                            --caso contrario siga bajando
                        end if;
                    end if;				
                    --if(palancasjugadores(0) = '1') then 
                    if(sonicplayer1 = '1') then 
                        if( coord_y_raqueta1  = MedidaVerticalRaqueta +15 ) then -- -25 = 1falta
                            coord_y_raqueta1 <= MedidaVerticalRaqueta +15 ; -- si llega el jugador 1 al incio vertical, ahi pare
                        else coord_y_raqueta1 <= coord_y_raqueta1 - 1;
                            --caso contrario siga subiendo bajando
                        end if;
                    end if;
                    

                    
                    --MovimientoRaqueta Jugador2 (pin c10)	
                    --if(palancasjugadores(1) = '0') then
                    if(sonicplayer2 = '0') then
                        if( coord_y_raqueta2  = Fvv - Ivv - MedidaVerticalRaqueta + 30) then --525-35=490
                            coord_y_raqueta2 <= Fvv - Ivv - MedidaVerticalRaqueta + 30;-- si llega el jugador 2 al fin vertical, ahi pare
                        else coord_y_raqueta2 <= coord_y_raqueta2 + 1;
                            --caso contrario siga bajando
                        end if;
                    end if;				
                    --if(palancasjugadores(1) = '1') then
                    if(sonicplayer2 = '1') then
                        if( coord_y_raqueta2  =  MedidaVerticalRaqueta +15) then
                            coord_y_raqueta2 <=  MedidaVerticalRaqueta +15 ; -- si llega el jugador 2 al incio vertical, ahi pare
                        else coord_y_raqueta2 <= coord_y_raqueta2 - 1;
                            --caso contrario siga subiendo  bajando
                        end if;
                end if;
                
            end if;		
        end process;




        
        --Fisicas de la pelota	
        process(reloj_pelota, encendido, Direccion_pelota, movimiento_juego) begin 
        
        
            if(encendido = '0' or movimiento_juego = '0') then
                --En caso de que no este encendido el juego o aun no se indique movimiento, centra la pelota
                Coord_x_pelota <= 320;
                Coord_y_pelota <= 240;
                
                Direccion_pelota <= Direccion_pelota + 1;
                --cambiamos a la siguiente direccion de inicio de la pelota para que continue el juego
                        if(Direccion_pelota > 5) then
                            Direccion_pelota <= 0; -- se reinicia el ciclo de direcciones cuando ya se usaron todas
                        end if;
            
            elsif(reloj_pelota'event and reloj_pelota = '1') then
                --en cada flanco ascendente del reloj de velocidad de la pelota 
                case Direccion_pelota is
                
                    -- Direcciones, 6 en total, 4 diagonales y 2 horizontales	
                    --MODIFICAR
                        --El orden que nos da es el de las manecillas del reloj de 0 a 5 
                    --MODIFICAR			
                    when 0 => Coord_x_pelota <= Coord_x_pelota + 1; 	--Diagonal hacia la derecha y abajo
                                Coord_y_pelota <= Coord_y_pelota - 1;

                    when 1 => Coord_x_pelota <= Coord_x_pelota - 1;		--Diagonal hacia la izquierda y abajo
                                Coord_y_pelota <= Coord_y_pelota - 1;

                    when 2 => Coord_x_pelota <= Coord_x_pelota - 1;		--Diagonal hacia la izquierda y arriba
                                Coord_y_pelota <= Coord_y_pelota + 1;

                    when 3 => Coord_x_pelota <= Coord_x_pelota + 1;		--Diagonal hacia la derecha y arriba	
                                Coord_y_pelota <= Coord_y_pelota + 1;

                    when 4 => Coord_x_pelota <= Coord_x_pelota + 1;		--Horizontal a la derecha

                    when 5 => Coord_x_pelota <= Coord_x_pelota - 1;		--Horizontal a la izquierda

                end case;
                
                
                --Fisica de rebote en los bordes de las barras ---Verticales
                if(Coord_y_pelota = 30) then	 --Si toca el borde superior la pelota			
                    if(Direccion_pelota = 0) then -- y tiene una Diagonal hacia la derecha y abajo
                        Direccion_pelota <= 3;	--rebota haciando una Diagonal hacia la derecha y arriba	
                    elsif(Direccion_pelota = 1) then
                        Direccion_pelota <= 2;
                    end if;
                end if;
                
                if(Coord_y_pelota = 480) then  --Si toca el borde inferior la pelota							
                    if(Direccion_pelota = 2) then --si hace una Diagonal hacia la izquierda y arriba
                        Direccion_pelota <= 1;	--rebota haciendo una Diagonal hacia la izquierda y abajo
                    elsif(Direccion_pelota = 3) then
                        Direccion_pelota <= 0;
                    end if;
                end if;
                

                --Fisica de rebote en los bordes de las barras ---Horizontales
                if(Coord_x_pelota = 0) then		--Si toca el borde izquierdo			
                    if(Direccion_pelota = 1) then --Si venia en Diagonal hacia la izquierda y abajo
                        Direccion_pelota <= 0;	--Rebota en Diagonal hacia la derecha y abajo
                    elsif(Direccion_pelota = 2) then --Si venia en Diagonal hacia la izquierda y arriba
                        Direccion_pelota <= 3;	   --Rebota en Diagonal hacia la derecha y arriba
                    elsif(Direccion_pelota = 5) then --Si venia en Horizontal a la izquierda
                        Direccion_pelota <= 4;	   --Horizontal a la derecha
                    end if;
                end if;
                
                if(Coord_x_pelota = 640) then		--Si toca el borde Derecho						
                    if(Direccion_pelota = 0) then	--Si venia en Diagonal hacia la derecha y abajo
                        Direccion_pelota <= 1;	--Rebota en Diagonal hacia la izquierda y abajo
                    elsif(Direccion_pelota = 3) then  --Si venia en Diagonal hacia la derecha y arriba
                        Direccion_pelota <= 2;		--Rebota en Diagonal hacia la izquierda y arriba
                    elsif(Direccion_pelota = 4) then  --Si venia en Horizontal a la derecha
                        Direccion_pelota <= 5;		--Rebota en Horizontal a la izquierda
                    end if;
                end if;
                

                -- Fisicas de Rebote del balon con las raquetas de los jugadores
                --Rebote de balon en jugador 2
                if(Coord_x_pelota + MedidaPelota > coord_x_raqueta2 - MedidaHorizontalRaqueta) then 
                --si la pelota llega a la posicion horizontal de la raqueta del jugador 2
                        if(Coord_y_pelota - MedidaPelota <= coord_y_raqueta2 + MedidaVerticalRaqueta and
                            Coord_y_pelota + MedidaPelota >= coord_y_raqueta2 - MedidaVerticalRaqueta) then
                            --Si la pelota esta en el rango vertical de la raqueta2
                            if(Coord_y_pelota >= coord_y_raqueta2 - 10 and
                                Coord_y_pelota <= coord_y_raqueta2 + 10) then
                                --Si la pelota esta cerca del centro, va a rebotar horizontalmente 
                                    Direccion_pelota <= 5;
                            else							
                                if(Direccion_pelota = 0) then 
                                --Si la pelota viene en Diagonal hacia la derecha y abajo
                                    Direccion_pelota <= 1; --Rebota en Diagonal hacia la izquierda y abajo
                                    
                                elsif(Direccion_pelota = 3) then
                                --Si la pelota viene en Diagonal hacia la derecha y arriba
                                    Direccion_pelota <= 2; --Rebota en Diagonal hacia la izquierda y arriba
                                
                                elsif(Direccion_pelota = 4) then
                                --Si la pelota viene en Horizontal a la derecha
                                    if(Coord_y_pelota > coord_y_raqueta2) then
                                    --Si la pelota toca borde vertical del jugador 2 (borde superior)
                                        Direccion_pelota <= 2;--Rebota en Diagonal hacia la izquierda y arriba
                                    else--(borde inferior)
                                        Direccion_pelota <= 1;--Rebota en Diagonal hacia la izquierda y abajo
                                    end if;
                                end if;
                            end if;
                        end if;
                end if;
                

                -- Fisicas de Rebote del balon con las raquetas de los jugadores
                --Rebote de balon en jugador 1
                if(Coord_x_pelota - MedidaPelota < coord_x_raqueta1 + MedidaHorizontalRaqueta) then
                --Si la pelota llega a la posicion horizontal de la raqueta del jugador 1
                        if(Coord_y_pelota - MedidaPelota <= coord_y_raqueta1 + MedidaVerticalRaqueta and
                            Coord_y_pelota + MedidaPelota >= coord_y_raqueta1 - MedidaVerticalRaqueta) then
                            --Si la pelota esta en el rango vertical de la raqueta1
                            if(Coord_y_pelota >= coord_y_raqueta1 - 10 and
                                Coord_y_pelota <= coord_y_raqueta1 + 10) then
                                    --Si la pelota esta cerca del centro, va a rebotar horizontalmente
                                    Direccion_pelota <= 4;
                            else							
                                if(Direccion_pelota = 1) then
                                --Si la pelota viene en Diagonal hacia la izquierda y abajo
                                    Direccion_pelota <= 0; --Rebota en Diagonal hacia la derecha y abajo
                                    
                                elsif(Direccion_pelota = 2) then
                                --Si la pelota viene en Diagonal hacia la izquierda y arriba
                                    Direccion_pelota <= 3;--Rebota en Diagonal hacia la derecha y arriba
                                
                                elsif(Direccion_pelota = 5) then
                                --Si la pelota viene de forma horizontal hacia la izquierda
                                    if(Coord_y_pelota > coord_y_raqueta1) then
                                    --Si la pelota toca borde vertical del jugador 1 (borde superior)
                                        Direccion_pelota <= 3;--Rebota en Diagonal hacia la derecha y arriba
                                    else--(borde inferior)
                                        Direccion_pelota <= 0;--Rebota en Diagonal hacia la derecha y abajo
                                    end if;
                                end if;
                            end if;
                        end if;
                end if;
                
            
            end if;
            
        end process;
        




        
        --Logica de la maquina de estados del videojuego
        process(reloj_pixeles, encendido) begin
            --Podemos ver que se ejecuta cuando reloj_pixeles, o encendido cambia
        
            if(encendido = '0') then 
            --Si se apaga el juego se reinician los estados del juego
                estado <= S0;
                marcador_j1 <= 0;
                marcador_j2 <= 0;
            
            elsif(reloj_pixeles'event and reloj_pixeles = '1') then
            --Si estamos en un flanco ascendente del reloj de pixeles
                case estado is
                    when S0 => --Cuando estamos en el estado 0
                        if(start_game = '0') then --Si no se inia el juego
                            Estado <= S1; --Se espera que el jugador inicie el jeugo para continuar
                        end if;

                    when S1 =>--Cuando estamos en el estado 1
                        
                        --Si anota el jugador 2
                        if(Coord_x_pelota < 40) then--Si la pelota es anotada en la cancha izquierda
                            Estado <= S0; --Se pausa el juego
                            if(marcador_j2 = 9) then --Si el jugador 2 llego a 9 puntos
                                --gano el juego y reiniciamos los marcadores
                                marcador_j2 <= 0;
                                marcador_j1 <= 0;
                            else
                                --Si no se ha ganado el juego, solo aumentamos el contador del jugador 2
                                marcador_j2 <= marcador_j2 + 1; 
                            end if;
                        end if;

                        --Si anota el jugador 1
                        if(Coord_x_pelota > 600) then --Si la pelota es anotada en la cancha derecha 
                            Estado <= S0; --Se pausa el juego
                            if(marcador_j1 = 9) then --Si el jugador 1 llego a 9 puntos
                                --gano el juego y reiniciamos los marcadores
                                marcador_j1 <= 0;
                                marcador_j2 <= 0;
                            else
                                --Si no se ha ganado el juego, solo aumentamos el contador del jugador 1
                                marcador_j1 <= marcador_j1 + 1;
                            end if;
                        end if;
                        
                end case;
            end if;
        end process;
        
        --Proceso que pausa o reanuda el juego
        process(Estado) begin
            --Cuando haya un cambio en el estado de la maquina de estados del juego
            
            case Estado is
                when S0 => --Si estamos en S0, asignamos 0 a mov, lo que pausa el juego
                    movimiento_juego <= '0';

                when S1 => --Si estamos en S1, asignamos 1 a mov, lo que reanuda el juego
                    movimiento_juego <= '1';
            end case;
        end process;




        
        --Proceso que se encarga de dibujar el juego en la pantalla
        process(coord_x_raqueta1, coord_y_raqueta1, 
                coord_x_raqueta2, coord_y_raqueta2, 
                habilitador, 
                contador_renglones, contador_columnas) begin
            
            --Si estamos en un area visible de la pantalla VGA para poder dibujar
            if(habilitador = '1') then
            
                --En caso de que estemos en un area perteneciente al jugador 1
                if((coord_x_raqueta1 <= contador_columnas + MedidaHorizontalRaqueta) and
                    (coord_x_raqueta1 + MedidaHorizontalRaqueta >= contador_columnas) and
                    (coord_y_raqueta1 <= contador_renglones + MedidaVerticalRaqueta) and
                    (coord_y_raqueta1 + MedidaVerticalRaqueta >= contador_renglones)) or
                    
                --En caso de que estemos en un area perteneciente al jugador 2
                    ((coord_x_raqueta2 <= contador_columnas + MedidaHorizontalRaqueta) and
                    (coord_x_raqueta2 + MedidaHorizontalRaqueta >= contador_columnas) and
                    (coord_y_raqueta2 <= contador_renglones + MedidaVerticalRaqueta) and
                    (coord_y_raqueta2 + MedidaVerticalRaqueta >= contador_renglones)) or
                    
                --En caso de que estemos en un area perteneciente a la Pelota
                    ((Coord_x_pelota <= contador_columnas + MedidaPelota) and
                    (Coord_x_PELOTA + MedidaPelota >= contador_columnas) and
                    (Coord_y_pelota <= contador_renglones + MedidaPelota) and
                    (Coord_y_pelota + MedidaPelota >= contador_renglones))	then
                    
                    --Colores que se usaran 
                        R <= "1110";
                        G <= "1110";
                        B <= "0000";
                    
                else		
                    --Para el resto (fondo de la pantalla)			
                    R <= "1000";
                    G <= "0000";
                    B <= "1100";				
                end if;
                
            else
            
                -- If habilitador = 0, No mostrar nada
            
                R <= (others => '0');
                G <= (others => '0');
                B <= (others => '0');
                
            end if;
            
        end process;

    end imprime_pantalla_bhv;
                


--



Actualmente no lanza ningun error, pero no hace nada tampoco.
Ayudame a solucionar el problema, si la logica para interactuar los sensores ultrasonicos con el archivo
"imprime_pantalla.vhd" es incorrecto, o si la definicion de sus puertos del propio archivo sonic lo es.
Sospecho mucho de ese archivo en el port:
sensor_eco : buffer STD_LOGIC;

creo que el buffer hace que no funcione correctamente. 
Pero quiero que analises todas las posibilidades del porque no esta funcionando
Esta es una pruba contra OpenIA para ver que chat bot es mejor, confio en ti Claude 


